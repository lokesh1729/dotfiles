" ============================================================================

" Vundle initialization
" Avoid modify this section, unless you are very sure of what you are doing

" no vi-compatible
set nocompatible

" Setting up Vundle - the best vim plugin manager
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Plugins
Plugin 'gmarik/vundle'

" ============================================================================
" Active plugins
" You can disable or add new ones here:

" Plugins from github repos:

" Better file browser
Plugin 'scrooloose/nerdtree'
" Code commenter
Plugin 'scrooloose/nerdcommenter'
" Class/module browser
Plugin 'majutsushi/tagbar'
" Code and files fuzzy finder
Plugin 'ctrlpvim/ctrlp.vim'
" Extension to ctrlp, for fuzzy command finder
Plugin 'fisadev/vim-ctrlp-cmdpalette'
" Maybe the best Git integration
Plugin 'tpope/vim-fugitive'
" Airline
Plugin 'vim-airline/vim-airline'
" awesome colorscheme
Plugin 'tomasr/molokai'
"alternative to SimpyLFold
Plugin 'Konfekt/FastFold'
" bookmarks
Plugin 'MattesGroeger/vim-bookmarks'
" ConfirmQuit
Plugin 'vim-scripts/ConfirmQuit.vim'
" Vim Ctags
Plugin 'szw/vim-tags'
" ============================================================================
" Install plugins the first time vim runs

if iCanHazVundle == 0
    echo "Installing Plugins, please ignore key map error messages"
    echo ""
    :PluginInstall
endif

" ============================================================================
" Vim settings and mappings
" You can edit them as you wish

" allow plugins by file type (required for plugins!)
filetype plugin on
filetype indent on

" tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
" highlight cursor line and column
set cursorline
set cursorcolumn
" hidden startup messages
set shortmess=atI
" auto read and write
set autowrite
set autoread
" when deal with unsaved files ask what to do
set confirm
set background=dark
set encoding=utf-8
set backspace=indent,eol,start

" tab length exceptions on some file types
 autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
 autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
 autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2


" always show status bar
set laststatus=2

" incremental search
set incsearch
" highlighted search results
set hlsearch
" search ignore case
set ignorecase

" syntax highlight on
syntax on

" show line numbers
set nu


" Plugins settings and mappings
" Edit them as you wish.

" Tagbar -----------------------------

" toggle tagbar display
map <F8> :TagbarToggle<CR>
" autofocus on tagbar open
let g:tagbar_autofocus = 1

" NERDTree -----------------------------

" toggle nerdtree display
map <F3> :NERDTreeToggle<CR>
" open nerdtree with the current file selected
nmap ,n :NERDTreeFind<CR>
" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\~$']
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeWinSize = 18
" CtrlP ------------------------------

" file finder mappings
let g:ctrlp_map = '<c-p>'
let g:ctrlp_path_nolim = 1
" hidden some types files
let g:ctrlp_show_hidden = 1
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.png,*.jpg,*.gif           "Linux
"mapping to CtrlP if not"
"nmap <C-P> :CtrlP<CR>
"mapping to CtrlB for Searching Buffers
nmap ,b :CtrlPBuffer<CR>
" tags (symbols) in current file finder mapping
nmap ,t :CtrlPBufTag<CR>
" tags (symbols) in all files finder mapping
nmap ,g :CtrlPBufTagAll<CR>
" general code finder in all files mapping
nmap ,l :CtrlPLine<CR>
" recent files finder mapping
nmap ,m :CtrlPMRUFiles<CR>
" don't change working directory
let g:ctrlp_working_path_mode = 0
" ignore these files and folders on file finder
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',
  \ 'file': '\.pyc$\|\.pyo$',
  \ }


let g:airline_powerline_fonts = 1
let g:airline#extensions#whitespace#enabled = 1

if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''


let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#enabled = 1
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99

set tw=100

colorscheme molokai
" Move between tabs
noremap <C-Right> :tabn<CR>
noremap <C-Right> <ESC>:tabn<CR>
noremap <C-Left> :tabp<CR>
noremap <C-Left> <ESC>:tabp<CR>
" Move between Buffers
nnoremap <A-Left> :bprevious<CR>
nnoremap <A-Right> :bnext<CR>
"Search for selected text
vnoremap // y/<C-R>"<CR>
"Find usages
vnoremap ?? y:noautocmd vimgrep /\<<C-R>"\>/ **/*.py <CR>
"Find tags
nnoremap ts :exec("ts /".expand("<cword>"))<CR>
"enable tab lines
"remap y$ (yank to the end of the line except the new line character) to y$"
noremap Y y$
"Open tag definition in new tab http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks
map <M-\> :tab split<CR>:exec("ts /".expand("<cword>"))<CR>
"Open tag in vertical split
map <C-\> :vsp <CR>:exec("ts /".expand("<cword>"))<CR>
"map buffer next and prev
map bt :bnext<CR>
map bT :bprev<CR>
"map g-Ctrl-] which goes to matching tag if only one else gives list of
"matching tags
nnoremap <C-]> g<C-]>
" Bookmarks customizations
let g:bookmark_highlight_lines = 1
nmap bm <Plug>BookmarkToggle
nmap ba <Plug>BookmarkAnnotate
nmap <C-b> <Plug>BookmarkShowAll
nmap bn <Plug>BookmarkNext
nmap bp <Plug>BookmarkPrev
nmap <Leader>c <Plug>BookmarkClear
nmap <Leader>x <Plug>BookmarkClearAll
nmap bkk <Plug>BookmarkMoveUp
nmap bjj <Plug>BookmarkMoveDown
nmap <Leader>g <Plug>BookmarkMoveToLine
syntax on

"Set no wrap
set nowrap

set formatoptions=l
set shortmess+=c

" Search only under selected region
function! RangeSearch(direction)
  call inputsave()
  let g:srchstr = input(a:direction)
  call inputrestore()
  if strlen(g:srchstr) > 0
    let g:srchstr = g:srchstr.
          \ '\%>'.(line("'<")-1).'l'.
          \ '\%<'.(line("'>")+1).'l'
  else
    let g:srchstr = ''
  endif
endfunction
vnoremap <silent> / :<C-U>call RangeSearch('/')<CR>:if strlen(g:srchstr) > 0\|exec '/'.g:srchstr\|endif<CR>
vnoremap <silent> ? :<C-U>call RangeSearch('?')<CR>:if strlen(g:srchstr) > 0\|exec '?'.g:srchstr\|endif<CR>
