" ============================================================================

" Vundle initialization
" Avoid modify this section, unless you are very sure of what you are doing

" no vi-compatible
set nocompatible
if has('nvim')
    let s:plug_path = '~/.local/share/nvim/site/autoload/plug.vim'
    let g:python_host_prog  = '/usr/local/bin/python2.7'
    let g:python3_host_prog = '/Users/slokesh/.pyenv/shims/python'
    let s:plugged_path = '~/.local/share/nvim/plugged'
else
    let s:plug_path = '~/.vim/autoload/plug.vim'
    let s:plugged_path = '~/.vim/plugged'
endif

if !filereadable(expand(s:plug_path))
    echo 'Installing vim-plug...'
    echo ''
    execute "silent !curl -fLo " . s:plug_path . " --create-dirs "
        \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

    " Install plugins after loading vim
    autocmd VimEnter * PlugInstall
endif

call plug#begin(s:plugged_path)
exec printf('source %s/%s', s:plugged_path, '/plugin/bclose.vim')
exec printf('source %s/%s', s:plugged_path, '/plugin/IndexedSearch.vim')

" ============================================================================
" Better file browser
Plug 'scrooloose/nerdtree'
" Code commenter
Plug 'scrooloose/nerdcommenter'
" Class/module browser
Plug 'majutsushi/tagbar'
" Code and files fuzzy finder
Plug 'ctrlpvim/ctrlp.vim'
" Extension to ctrlp, for fuzzy command finder
Plug 'fisadev/vim-ctrlp-cmdpalette'
" Maybe the best Git integration
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
" Airline
Plug 'vim-airline/vim-airline'
" awesome colorscheme
Plug 'tomasr/molokai'
Plug 'dracula/vim', { 'as': 'dracula' }
"alternative to SimpyLFold
Plug 'Konfekt/FastFold'
" bookmarks
Plug 'MattesGroeger/vim-bookmarks'
" ConfirmQuit
Plug 'vim-scripts/ConfirmQuit.vim'
Plug 'tweekmonster/django-plus.vim'
" Vim Ctags
Plug 'szw/vim-tags'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'mattn/emmet-vim'
"let g:user_emmet_leader_key='<C-y>'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}
Plug 'w0rp/ale'
Plug 'tpope/vim-unimpaired'
autocmd BufWritePost *.js AsyncRun -post=checktime ./node_modules/.bin/eslint --fix %
let g:ale_sign_error = '●'
let g:ale_lint_on_enter = 0
if has('nvim')
    Plug 'skywind3000/asyncrun.vim'
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'python-mode/python-mode', { 'branch': 'develop' }
    Plug 'Shougo/context_filetype.vim'
    Plug 'shougo/echodoc.vim'
    Plug 'shougo/neoinclude.vim'
    Plug 'zchee/deoplete-go'
    Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
    Plug 'wokalski/autocomplete-flow'
    Plug 'peitalin/vim-jsx-typescript'
    Plug 'leafgarland/typescript-vim'
    Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
    Plug 'Shougo/neco-syntax'
    let g:deoplete#enable_at_startup = 1
    autocmd FileType python call deoplete#custom#buffer_option('auto_complete', v:false)
    let g:pymode_lint_cwindow = 0
    run UpdateRemotePlugins
endif
Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<c-b>"
let g:UltiSnipsJumpBackwardTrigger = "<c-q>"
let g:UltiSnipsListSnippets        = "<c-m>" "List possible snippets based on current file
Plug 'airblade/vim-gitgutter'
Plug 'godlygeek/tabular'
Plug 'elzr/vim-json'
Plug 'jiangmiao/auto-pairs'
Plug 'mileszs/ack.vim'
Plug 'alvan/vim-closetag'
call plug#end()
" =============Plugins end===========
" Vim settings and mappings

filetype plugin on
filetype indent on
filetype on

" tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
" highlight cursor line and column
set cursorline
set cursorcolumn
" hidden startup messages
set shortmess=atI
" auto read and write
set autowrite
set autoread
" when deal with unsaved files ask what to do
set confirm
set background=dark
set encoding=utf-8
set backspace=indent,eol,start

" tab length exceptions on some file types
 autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
 autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
 autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2


" always show status bar
set laststatus=2

" incremental search
set incsearch
" highlighted search results
set hlsearch
" search ignore case
set ignorecase

" syntax highlight on
syntax on

" show line numbers
set nu


" Plugins settings and mappings
" Edit them as you wish.

" Tagbar ----------------------------- 

" toggle tagbar display
map <F8> :TagbarToggle<CR>

" autofocus on tagbar open
let g:tagbar_autofocus = 1

" NERDTree ----------------------------- 

" toggle nerdtree display
map <C-n> :NERDTreeToggle<CR>
autocmd vimenter * NERDTree
" open nerdtree with the current file selected
nmap ,n :NERDTreeFind<CR>
" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\~$']
let g:NERDTreeWinSize = 18
" open nerdtree with the current file selected
nmap ,n :NERDTreeFind<CR>
" CtrlP ------------------------------

" file finder mappings
let g:ctrlp_map = '<c-p>'
let g:ctrlp_path_nolim = 1
" hidden some types files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.png,*.jpg,*.gif           "Linux
let g:ctrlp_extensions = ['buffertag', 'quickfix',  'undo', 'line', 'changes', 'mixed']
"nmap <C-P> :CtrlP<CR> 
"mapping to CtrlB for Searching Buffers
nmap ,b :CtrlPBuffer<CR>
" tags (symbols) in current file finder mapping
nmap ,t :CtrlPBufTagAll<CR>
" general code finder in all files mapping
nmap ,l :CtrlPLine<CR>
" don't change working directory
let g:ctrlp_working_path_mode = 0
" ignore these files and folders on file finder
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn|node_modules)$',
  \ 'file': '\.pyc$\|\.pyo$',
  \ }
let g:ctrlp_cmdpalette_execute = 1
nnoremap <C-b> :CtrlPCmdPalette<CR>
let g:airline_powerline_fonts = 1
let g:airline#extensions#whitespace#enabled = 1

if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''


let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#enabled = 1
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99

set tw=100

colorscheme molokai
" Move between tabs
" noremap <C-M-Right> <ESC>:tabn<CR>
" noremap <C-M-Left> <ESC>:tabp<CR>
" Move between Buffers alt + [ and alt + ]
nnoremap “ :bprevious<CR>
nnoremap ‘ :bnext<CR>
"Search for selected text
vnoremap // y/<C-R>"<CR>
"Find tags
nnoremap <C-f> :Ack --ignore-dir **/node_modules/ --ignore-dir **/bower_components/ --ignore-dir **/dist/ --ignore-dir **/admin/ -H
nnoremap ts :exec("ts /".expand("<cword>"))<CR>
"enable tab lines
"remap y$ (yank to the end of the line except the new line character) to y$"
noremap Y y$
"Open tag definition in new tab http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks
"nnoremap « :tab split<CR>:exec("ts /".expand("<cword>"))<CR>
"Open tag in vertical split
map <C-\> :vsp <CR>:exec("ts /".expand("<cword>"))<CR>
"map buffer next and prev
map bt :bnext<CR>
map bT :bprev<CR>
"map g-Ctrl-] which goes to matching tag if only one else gives list of
"matching tags
nnoremap <C-]> g<C-]>
" Bookmarks customizations
let g:bookmark_highlight_lines = 1
nmap bm <Plug>BookmarkToggle
nmap ba <Plug>BookmarkAnnotate
nmap bs <Plug>BookmarkShowAll
nmap bn <Plug>BookmarkNext
nmap bp <Plug>BookmarkPrev
nmap <Leader>c <Plug>BookmarkClear
nmap <Leader>x <Plug>BookmarkClearAll
"Set no wrap
set nowrap

set formatoptions=l
set shortmess+=c 

" Search only under selected region
function! RangeSearch(direction)
  call inputsave()
  let g:srchstr = input(a:direction)
  call inputrestore()
  if strlen(g:srchstr) > 0
    let g:srchstr = g:srchstr.
          \ '\%>'.(line("'<")-1).'l'.
          \ '\%<'.(line("'>")+1).'l'
  else
    let g:srchstr = ''
  endif
endfunction
vnoremap <silent> / :<C-U>call RangeSearch('/')<CR>:if strlen(g:srchstr) > 0\|exec '/'.g:srchstr\|endif<CR>
vnoremap <silent> ? :<C-U>call RangeSearch('?')<CR>:if strlen(g:srchstr) > 0\|exec '?'.g:srchstr\|endif<CR>

let g:kite_tab_complete=1

if has('gui_macvim')
    set guifont=SourceCodeProForPowerline-Regular:h14
endif
if has('gui_vimr')
    colorscheme dracula
endif
"Find refernces ctrl + ?
noremap <C-e> :exec('Ack '.expand("<cword>").' -H --ignore-dir **/node_modules/ --ignore-dir **/bower_components/ --ignore-dir **/dist/ --ignore-dir **/admin/')<CR>
augroup typescript
    autocmd!
    " setting typescript things.
    let g:nvim_typescript#type_info_on_hold = 1
    let g:nvim_typescript#signature_complete = 1

    autocmd BufNewFile,BufRead *.ts set filetype=typescript
    autocmd BufNewFile,BufRead *.tsx set filetype=typescript.jsx
    autocmd FileType typescript set tabstop=2 shiftwidth=2 expandtab
    nnoremap <leader>i :TSImport<CR>
    nnoremap <leader>d :TSDefPreview<CR>
    nnoremap <leader>t :TSType<CR>
    nnoremap <leader>f :TSGetCodeFix<CR> " this is called on insert leave
augroup END
